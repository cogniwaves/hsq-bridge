#!/bin/bash

# Pre-commit Hook
# Runs quality checks before allowing commits

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}🔍 Running pre-commit quality checks...${NC}"

# Check if we're in the project root
if [ ! -f "package.json" ] && [ ! -f "cw_app/package.json" ]; then
    echo -e "${RED}❌ Pre-commit hook must be run from project root${NC}"
    exit 1
fi

# Function to check if files have changed in a directory
files_changed_in_dir() {
    local dir="$1"
    git diff --cached --name-only | grep -q "^$dir/" || return 1
}

# Function to run linting for a component
run_linting() {
    local component="$1"
    local dir="$2"
    
    if files_changed_in_dir "$dir"; then
        echo -e "${BLUE}📝 Linting $component files...${NC}"
        cd "$dir"
        
        if ! npm run lint; then
            echo -e "${RED}❌ $component linting failed${NC}"
            cd - > /dev/null
            return 1
        fi
        
        cd - > /dev/null
        echo -e "${GREEN}✅ $component linting passed${NC}"
    else
        echo -e "${YELLOW}⏭️  No $component files changed, skipping linting${NC}"
    fi
    
    return 0
}

# Function to run type checking
run_type_checking() {
    local component="$1"
    local dir="$2"
    
    if files_changed_in_dir "$dir"; then
        echo -e "${BLUE}🔧 Type checking $component files...${NC}"
        cd "$dir"
        
        if command -v npm run type-check &> /dev/null; then
            if ! npm run type-check; then
                echo -e "${RED}❌ $component type checking failed${NC}"
                cd - > /dev/null
                return 1
            fi
        fi
        
        cd - > /dev/null
        echo -e "${GREEN}✅ $component type checking passed${NC}"
    else
        echo -e "${YELLOW}⏭️  No $component files changed, skipping type checking${NC}"
    fi
    
    return 0
}

# Function to check for sensitive files
check_sensitive_files() {
    echo -e "${BLUE}🔒 Checking for sensitive files...${NC}"
    
    local sensitive_files=$(git diff --cached --name-only | grep -E '\.(env|key|pem|p12)$|secrets|credentials' || true)
    
    if [ -n "$sensitive_files" ]; then
        echo -e "${RED}❌ Potentially sensitive files detected:${NC}"
        echo "$sensitive_files"
        echo -e "${RED}Please review these files before committing${NC}"
        return 1
    fi
    
    echo -e "${GREEN}✅ No sensitive files detected${NC}"
    return 0
}

# Function to check for hardcoded secrets
check_hardcoded_secrets() {
    echo -e "${BLUE}🔍 Checking for hardcoded secrets...${NC}"
    
    # Check staged files for potential secrets
    local staged_files=$(git diff --cached --name-only | grep -E '\.(ts|js|tsx|jsx|json)$' || true)
    
    if [ -n "$staged_files" ]; then
        for file in $staged_files; do
            # Check for potential API keys, secrets, passwords
            if git show ":$file" | grep -iE "(api_?key|secret|password|token|credential).*(=|:).*([\'\"][a-zA-Z0-9_-]{20,}[\'\"]|[a-zA-Z0-9_-]{32,})" > /dev/null; then
                echo -e "${YELLOW}⚠️  Potential hardcoded secret in: $file${NC}"
                echo -e "${YELLOW}   Please review and ensure no sensitive data is committed${NC}"
                
                # Show the line (for review)
                echo -e "${YELLOW}   Suspicious lines:${NC}"
                git show ":$file" | grep -iE "(api_?key|secret|password|token|credential).*(=|:)" | head -3
                echo ""
                
                # Ask for confirmation
                echo -e "${YELLOW}   Do you want to continue? (y/N)${NC}"
                read -r response
                if [[ ! "$response" =~ ^[Yy]$ ]]; then
                    echo -e "${RED}❌ Commit aborted by user${NC}"
                    return 1
                fi
            fi
        done
    fi
    
    echo -e "${GREEN}✅ Hardcoded secrets check completed${NC}"
    return 0
}

# Function to run quick tests (optional, can be disabled for speed)
run_quick_tests() {
    local run_tests="${PRE_COMMIT_RUN_TESTS:-false}"
    
    if [ "$run_tests" != "true" ]; then
        echo -e "${YELLOW}⏭️  Quick tests disabled (set PRE_COMMIT_RUN_TESTS=true to enable)${NC}"
        return 0
    fi
    
    echo -e "${BLUE}🧪 Running quick tests...${NC}"
    
    # Backend quick tests
    if files_changed_in_dir "cw_app"; then
        cd cw_app
        if ! npm test -- --passWithNoTests --testPathPattern=unit --maxWorkers=1 --silent; then
            echo -e "${RED}❌ Backend quick tests failed${NC}"
            cd - > /dev/null
            return 1
        fi
        cd - > /dev/null
    fi
    
    # Dashboard quick tests
    if files_changed_in_dir "cw_dashboard"; then
        cd cw_dashboard
        if ! npm test -- --passWithNoTests --testPathPattern=unit --maxWorkers=1 --silent; then
            echo -e "${RED}❌ Dashboard quick tests failed${NC}"
            cd - > /dev/null
            return 1
        fi
        cd - > /dev/null
    fi
    
    echo -e "${GREEN}✅ Quick tests passed${NC}"
    return 0
}

# Main execution
main() {
    local failed_checks=0
    
    # Security checks (always run)
    check_sensitive_files || ((failed_checks++))
    check_hardcoded_secrets || ((failed_checks++))
    
    # Code quality checks
    run_linting "backend" "cw_app" || ((failed_checks++))
    run_linting "dashboard" "cw_dashboard" || ((failed_checks++))
    run_type_checking "dashboard" "cw_dashboard" || ((failed_checks++))
    
    # Optional quick tests
    run_quick_tests || ((failed_checks++))
    
    if [ $failed_checks -eq 0 ]; then
        echo -e "${GREEN}🎉 All pre-commit checks passed!${NC}"
        echo -e "${GREEN}✅ Commit allowed${NC}"
        return 0
    else
        echo -e "${RED}❌ $failed_checks pre-commit check(s) failed${NC}"
        echo -e "${RED}🚫 Commit blocked${NC}"
        echo ""
        echo -e "${BLUE}💡 Tips:${NC}"
        echo "   • Fix linting issues: npm run lint:fix"
        echo "   • Check types: npm run type-check"
        echo "   • Run tests: npm test"
        echo "   • Skip pre-commit (not recommended): git commit --no-verify"
        return 1
    fi
}

main "$@"