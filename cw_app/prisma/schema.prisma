generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model InvoiceMapping {
  id                                             String               @id @default(uuid())
  hubspotDealId                                  String?              @map("hubspot_deal_id")
  hubspotInvoiceId                               String?              @map("hubspot_invoice_id")
  quickbooksInvoiceId                            String?              @map("quickbooks_invoice_id")
  stripeInvoiceId                                String?              @map("stripe_invoice_id")
  totalAmount                                    Decimal              @map("total_amount")
  currency                                       String               @default("USD")
  status                                         InvoiceStatus
  clientEmail                                    String?              @map("client_email")
  clientName                                     String?              @map("client_name")
  dueDate                                        DateTime?            @map("due_date")
  issueDate                                      DateTime?            @map("issue_date")
  description                                    String?
  lastSyncAt                                     DateTime?            @map("last_sync_at")
  createdAt                                      DateTime             @default(now()) @map("created_at")
  updatedAt                                      DateTime             @updatedAt @map("updated_at")
  hubspotCreatedAt                               DateTime?            @map("hubspot_created_at")
  hubspotModifiedAt                              DateTime?            @map("hubspot_modified_at")
  hubspotClosedAt                                DateTime?            @map("hubspot_closed_at")
  invoiceSentAt                                  DateTime?            @map("invoice_sent_at")
  paymentDueDate                                 DateTime?            @map("payment_due_date")
  firstPaymentAt                                 DateTime?            @map("first_payment_at")
  fullyPaidAt                                    DateTime?            @map("fully_paid_at")
  firstSyncAt                                    DateTime?            @map("first_sync_at")
  lastWebhookAt                                  DateTime?            @map("last_webhook_at")
  lastPeriodicCheckAt                            DateTime?            @map("last_periodic_check_at")
  hubspotObjectId                                String?              @map("hubspot_object_id")
  hubspotObjectType                              String?              @map("hubspot_object_type")
  syncSource                                     String?              @map("sync_source")
  hubspotInvoiceNumber                           String?              @map("hubspot_invoice_number")
  balanceDue                                     Decimal?             @map("balance_due")
  subtotal                                       Decimal?
  hubspotRawData                                 Json?                @map("hubspot_raw_data")
  detectedCurrency                               String?              @map("detected_currency")
  lineItemsCount                                 Int                  @default(0) @map("line_items_count")
  tenant_id                                      String
  associations                                   InvoiceAssociation[]
  payments                                       InvoicePayment[]
  lineItems                                      LineItem[]
  syncLogs                                       SyncLog[]
  taxSummary                                     TaxSummary?

  @@unique([tenant_id, hubspotInvoiceId])
  @@unique([tenant_id, quickbooksInvoiceId])
  @@unique([tenant_id, stripeInvoiceId])
  @@index([tenant_id])
  @@index([tenant_id, status])
  @@map("invoice_mapping")
}

model PaymentMapping {
  id                                             String           @id @default(uuid())
  stripePaymentId                                String?          @map("stripe_payment_id")
  quickbooksPaymentId                            String?          @map("quickbooks_payment_id")
  amount                                         Decimal
  currency                                       String           @default("USD")
  paymentMethod                                  PaymentMethod    @map("payment_method")
  status                                         PaymentStatus
  transactionDate                                DateTime         @map("transaction_date")
  description                                    String?
  metadata                                       Json?
  lastSyncAt                                     DateTime?        @map("last_sync_at")
  createdAt                                      DateTime         @default(now()) @map("created_at")
  updatedAt                                      DateTime         @updatedAt @map("updated_at")
  tenant_id                                      String
  invoices                                       InvoicePayment[]
  syncLogs                                       SyncLog[]

  @@unique([tenant_id, quickbooksPaymentId])
  @@unique([tenant_id, stripePaymentId])
  @@index([tenant_id])
  @@index([tenant_id, status])
  @@map("payment_mapping")
}

model InvoicePayment {
  id               String           @id @default(uuid())
  invoiceMappingId String           @map("invoice_mapping_id")
  paymentMappingId String           @map("payment_mapping_id")
  allocatedAmount  Decimal          @map("allocated_amount")
  allocationDate   DateTime         @default(now()) @map("allocation_date")
  status           AllocationStatus
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  invoice          InvoiceMapping   @relation(fields: [invoiceMappingId], references: [id], onDelete: Cascade)
  payment          PaymentMapping   @relation(fields: [paymentMappingId], references: [id], onDelete: Cascade)

  @@unique([invoiceMappingId, paymentMappingId])
  @@map("invoice_payments")
}

model SyncLog {
  id                                                   String          @id @default(uuid())
  entityType                                           EntityType      @map("entity_type")
  entityId                                             String          @map("entity_id")
  operation                                            SyncOperation
  platform                                             Platform
  status                                               SyncStatus
  errorMessage                                         String?         @map("error_message")
  requestData                                          Json?           @map("request_data")
  responseData                                         Json?           @map("response_data")
  retryCount                                           Int             @default(0) @map("retry_count")
  nextRetryAt                                          DateTime?       @map("next_retry_at")
  createdAt                                            DateTime        @default(now()) @map("created_at")
  updatedAt                                            DateTime        @updatedAt @map("updated_at")
  invoiceId                                            String?         @map("invoice_id")
  paymentId                                            String?         @map("payment_id")
  contactId                                            String?         @map("contact_id")
  companyId                                            String?         @map("company_id")
  company                                              Company?        @relation(fields: [companyId], references: [id], onUpdate: NoAction)
  contact                                              Contact?        @relation(fields: [contactId], references: [id], onUpdate: NoAction)
  invoice                                              InvoiceMapping? @relation(fields: [invoiceId], references: [id], onUpdate: NoAction)
  payment                                              PaymentMapping? @relation(fields: [paymentId], references: [id], onUpdate: NoAction)

  @@index([platform, status])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@index([invoiceId])
  @@index([paymentId])
  @@index([contactId])
  @@index([companyId])
  @@map("sync_logs")
}

model WebhookEvent {
  id           String    @id @default(uuid())
  platform     Platform
  eventType    String    @map("event_type")
  eventId      String    @map("event_id")
  payload      Json
  processed    Boolean   @default(false)
  processedAt  DateTime? @map("processed_at")
  errorMessage String?   @map("error_message")
  retryCount   Int       @default(0) @map("retry_count")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  tenant_id    String?

  @@unique([platform, eventId, tenant_id])
  @@index([processed, createdAt])
  @@index([tenant_id])
  @@index([tenant_id, platform, eventType])
  @@map("webhook_events")
}

model Contact {
  id                  String               @id @default(uuid())
  hubspotContactId    String               @map("hubspot_contact_id")
  email               String?
  firstName           String?              @map("first_name")
  lastName            String?              @map("last_name")
  fullName            String?              @map("full_name")
  jobTitle            String?              @map("job_title")
  phone               String?
  country             String?
  city                String?
  hubspotCreatedAt    DateTime?            @map("hubspot_created_at")
  hubspotUpdatedAt    DateTime?            @map("hubspot_updated_at")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  lastSyncAt          DateTime?            @map("last_sync_at")
  tenant_id           String
  invoiceAssociations InvoiceAssociation[]
  syncLogs            SyncLog[]

  @@unique([tenant_id, hubspotContactId])
  @@index([tenant_id, email])
  @@index([tenant_id])
  @@map("contacts")
}

model Company {
  id                  String               @id @default(uuid())
  hubspotCompanyId    String               @map("hubspot_company_id")
  name                String?
  domain              String?
  industry            String?
  country             String?
  city                String?
  state               String?
  zip                 String?
  hubspotCreatedAt    DateTime?            @map("hubspot_created_at")
  hubspotUpdatedAt    DateTime?            @map("hubspot_updated_at")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  lastSyncAt          DateTime?            @map("last_sync_at")
  tenant_id           String
  invoiceAssociations InvoiceAssociation[]
  syncLogs            SyncLog[]

  @@unique([tenant_id, hubspotCompanyId])
  @@index([tenant_id, domain])
  @@index([tenant_id])
  @@map("companies")
}

model InvoiceAssociation {
  id               String         @id @default(uuid())
  invoiceId        String         @map("invoice_id")
  contactId        String?        @map("contact_id")
  companyId        String?        @map("company_id")
  isPrimaryContact Boolean        @default(false) @map("is_primary_contact")
  isPrimaryCompany Boolean        @default(false) @map("is_primary_company")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  company          Company?       @relation(fields: [companyId], references: [id])
  contact          Contact?       @relation(fields: [contactId], references: [id])
  invoice          InvoiceMapping @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@unique([invoiceId, contactId, companyId])
  @@map("invoice_associations")
}

model LineItem {
  id                 String         @id @default(uuid())
  hubspotLineItemId  String         @unique @map("hubspot_line_item_id")
  invoiceId          String         @map("invoice_id")
  productName        String?        @map("product_name")
  hubspotProductId   String?        @map("hubspot_product_id")
  sku                String?
  quantity           Int            @default(1)
  unitPrice          Decimal        @default(0) @map("unit_price")
  amount             Decimal        @default(0)
  currency           String?
  discountAmount     Decimal?       @map("discount_amount")
  discountPercentage Decimal?       @map("discount_percentage")
  preDiscountAmount  Decimal?       @map("pre_discount_amount")
  totalDiscount      Decimal?       @map("total_discount")
  taxAmount          Decimal?       @map("tax_amount")
  taxRate            Decimal?       @map("tax_rate")
  taxLabel           String?        @map("tax_label")
  taxCategory        String?        @map("tax_category")
  postTaxAmount      Decimal?       @map("post_tax_amount")
  externalTaxRateId  String?        @map("external_tax_rate_id")
  hubspotRawData     Json?          @map("hubspot_raw_data")
  hubspotCreatedAt   DateTime?      @map("hubspot_created_at")
  hubspotUpdatedAt   DateTime?      @map("hubspot_updated_at")
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")
  lastSyncAt         DateTime?      @map("last_sync_at")
  invoice            InvoiceMapping @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@index([hubspotProductId])
  @@index([currency])
  @@index([taxLabel])
  @@index([createdAt])
  @@map("line_items")
}

model TaxSummary {
  id                  String         @id @default(uuid())
  invoiceId           String         @unique @map("invoice_id")
  currency            String
  subtotalBeforeTax   Decimal        @default(0) @map("subtotal_before_tax")
  totalTaxAmount      Decimal        @default(0) @map("total_tax_amount")
  totalAfterTax       Decimal        @default(0) @map("total_after_tax")
  taxBreakdown        Json?          @map("tax_breakdown")
  totalDiscountAmount Decimal?       @map("total_discount_amount")
  createdAt           DateTime       @default(now()) @map("created_at")
  updatedAt           DateTime       @updatedAt @map("updated_at")
  invoice             InvoiceMapping @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([currency])
  @@map("tax_summary")
}

model SyncWatermark {
  id               String     @id @default(uuid())
  entityType       EntityType @unique @map("entity_type")
  lastSyncAt       DateTime?  @map("last_sync_at")
  entityCount      Int        @default(0) @map("entity_count")
  lastModifiedId   String?    @map("last_modified_id")
  syncDuration     Int?       @map("sync_duration")
  errorCount       Int        @default(0) @map("error_count")
  lastErrorMessage String?    @map("last_error_message")
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @updatedAt @map("updated_at")

  @@index([entityType, lastSyncAt])
  @@map("sync_watermarks")
}

model QuickBooksTransferQueue {
  id              String      @id @default(uuid())
  entityType      EntityType  @map("entity_type")
  entityId        String      @map("entity_id")
  actionType      ActionType  @map("action_type")
  status          QueueStatus @default(PENDING_REVIEW) @map("status")
  triggerReason   String      @map("trigger_reason")
  entityData      Json        @map("entity_data")
  originalData    Json?       @map("original_data")
  approvedBy      String?     @map("approved_by")
  approvedAt      DateTime?   @map("approved_at")
  rejectedBy      String?     @map("rejected_by")
  rejectedAt      DateTime?   @map("rejected_at")
  rejectionReason String?     @map("rejection_reason")
  validationNotes String?     @map("validation_notes")
  transferredAt   DateTime?   @map("transferred_at")
  quickbooksId    String?     @map("quickbooks_id")
  transferError   String?     @map("transfer_error")
  retryCount      Int         @default(0) @map("retry_count")
  nextRetryAt     DateTime?   @map("next_retry_at")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  @@index([status, entityType])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@index([approvedAt])
  @@map("quickbooks_transfer_queue")
}

// ============================================================================
// AUTHENTICATION & MULTI-TENANT MODELS (Phase 2)
// ============================================================================

model User {
  id                   String              @id @default(uuid())
  email                String              @unique
  passwordHash         String              @map("password_hash")
  firstName            String?             @map("first_name")
  lastName             String?             @map("last_name")
  avatarUrl            String?             @map("avatar_url")
  emailVerified        Boolean             @default(false) @map("email_verified")
  emailVerificationToken String?           @unique @map("email_verification_token")
  emailVerifiedAt      DateTime?           @map("email_verified_at")
  passwordResetToken   String?             @unique @map("password_reset_token")
  passwordResetExpiresAt DateTime?         @map("password_reset_expires_at")
  lastPasswordChangeAt DateTime?           @map("last_password_change_at")
  isActive             Boolean             @default(true) @map("is_active")
  isSuperAdmin         Boolean             @default(false) @map("is_super_admin")
  lastLoginAt          DateTime?           @map("last_login_at")
  lastActivityAt       DateTime?           @map("last_activity_at")
  loginCount           Int                 @default(0) @map("login_count")
  failedLoginAttempts  Int                 @default(0) @map("failed_login_attempts")
  lockedUntil          DateTime?           @map("locked_until")
  preferences          Json?               // User preferences (theme, language, etc.)
  metadata             Json?               // Additional user metadata
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")
  deletedAt            DateTime?           @map("deleted_at") // Soft delete support
  
  // Relationships
  tenantMemberships    TenantMembership[]
  createdTenants       Tenant[]            @relation("TenantCreator")
  sessions             UserSession[]
  sentInvitations      TenantInvitation[]  @relation("InvitationSender")
  
  @@index([email])
  @@index([isActive])
  @@index([lastActivityAt])
  @@map("users")
}

model Tenant {
  id                    String              @id @default(uuid())
  name                  String
  slug                  String              @unique // URL-safe identifier
  domain                String?             @unique // Custom domain support
  logo                  String?             // Logo URL
  description           String?
  industry              String?
  size                  String?             // Company size (1-10, 11-50, etc.)
  country               String?
  timezone              String              @default("UTC")
  billingEmail          String?             @map("billing_email")
  technicalEmail        String?             @map("technical_email")
  isActive              Boolean             @default(true) @map("is_active")
  isTrial               Boolean             @default(true) @map("is_trial")
  trialEndsAt           DateTime?           @map("trial_ends_at")
  subscriptionStatus    String?             @map("subscription_status") // active, past_due, cancelled, etc.
  subscriptionPlan      String?             @map("subscription_plan")
  subscriptionStartedAt DateTime?           @map("subscription_started_at")
  maxUsers              Int                 @default(5) @map("max_users")
  settings              Json?               // Tenant-specific settings
  metadata              Json?               // Additional tenant metadata
  createdById           String              @map("created_by_id")
  createdAt             DateTime            @default(now()) @map("created_at")
  updatedAt             DateTime            @updatedAt @map("updated_at")
  deletedAt             DateTime?           @map("deleted_at") // Soft delete support
  
  // Relationships
  createdBy             User                @relation("TenantCreator", fields: [createdById], references: [id])
  members               TenantMembership[]
  invitations           TenantInvitation[]
  
  @@index([slug])
  @@index([isActive])
  @@index([createdById])
  @@map("tenants")
}

model TenantMembership {
  id                String      @id @default(uuid())
  userId            String      @map("user_id")
  tenantId          String      @map("tenant_id")
  role              TenantRole
  isPrimary         Boolean     @default(false) @map("is_primary") // User's primary tenant
  joinedAt          DateTime    @default(now()) @map("joined_at")
  lastAccessedAt    DateTime?   @map("last_accessed_at")
  permissions       Json?       // Custom permissions override
  metadata          Json?       // Additional membership metadata
  invitedById       String?     @map("invited_by_id")
  invitationId      String?     @map("invitation_id") // Link to original invitation
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")
  
  // Relationships
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@unique([userId, tenantId])
  @@index([tenantId, role])
  @@index([userId, isPrimary])
  @@map("tenant_memberships")
}

model TenantInvitation {
  id                String           @id @default(uuid())
  tenantId          String           @map("tenant_id")
  email             String
  role              TenantRole       @default(MEMBER)
  invitationToken   String           @unique @map("invitation_token")
  status            InvitationStatus @default(PENDING)
  message           String?          // Optional invitation message
  invitedById       String           @map("invited_by_id")
  invitedAt         DateTime         @default(now()) @map("invited_at")
  acceptedAt        DateTime?        @map("accepted_at")
  rejectedAt        DateTime?        @map("rejected_at")
  expiresAt         DateTime         @map("expires_at")
  metadata          Json?            // Additional invitation metadata
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")
  
  // Relationships
  tenant            Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  invitedBy         User             @relation("InvitationSender", fields: [invitedById], references: [id])
  
  @@unique([tenantId, email, status]) // Prevent duplicate pending invitations
  @@index([invitationToken])
  @@index([email])
  @@index([tenantId, status])
  @@index([expiresAt])
  @@map("tenant_invitations")
}

model UserSession {
  id                String    @id @default(uuid())
  userId            String    @map("user_id")
  tenantId          String?   @map("tenant_id") // Current tenant context
  sessionToken      String    @unique @map("session_token")
  refreshToken      String?   @unique @map("refresh_token")
  ipAddress         String?   @map("ip_address")
  userAgent         String?   @map("user_agent")
  deviceInfo        Json?     @map("device_info") // Browser, OS, device type
  lastActivityAt    DateTime  @default(now()) @map("last_activity_at")
  expiresAt         DateTime  @map("expires_at")
  refreshExpiresAt  DateTime? @map("refresh_expires_at")
  revokedAt         DateTime? @map("revoked_at")
  revokedReason     String?   @map("revoked_reason")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  
  // Relationships
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([sessionToken])
  @@index([refreshToken])
  @@index([userId])
  @@index([tenantId])
  @@index([expiresAt])
  @@map("user_sessions")
}

// ============================================================================
// EXISTING OAUTH MODEL (Updated with Tenant relationship)
// ============================================================================

model OAuthToken {
  id                    String    @id @default(uuid())
  provider              String
  tenantId              String?   @map("tenant_id")
  accessToken           String    @map("access_token")
  refreshToken          String?   @map("refresh_token")
  tokenType             String    @default("Bearer") @map("token_type")
  expiresAt             DateTime  @map("expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope                 String?
  realmId               String?   @map("realm_id")
  companyId             String?   @map("company_id")
  lastRefreshedAt       DateTime? @map("last_refreshed_at")
  refreshCount          Int       @default(0) @map("refresh_count")
  failedRefreshCount    Int       @default(0) @map("failed_refresh_count")
  lastRefreshError      String?   @map("last_refresh_error")
  encryptionMethod      String    @default("AES-256-GCM") @map("encryption_method")
  encryptionIV          String?   @map("encryption_iv")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  
  // Note: Tenant relationship will be added in a future migration
  // after data migration is complete
  // tenant             Tenant?   @relation(fields: [tenantId], references: [id])

  @@unique([provider, tenantId])
  @@index([provider, expiresAt])
  @@index([tenantId])
  @@map("oauth_tokens")
}

model TokenRefreshLog {
  id               String    @id @default(uuid())
  tokenId          String    @map("token_id")
  provider         String
  tenantId         String?   @map("tenant_id")
  refreshType      String    @map("refresh_type")
  triggerReason    String    @map("trigger_reason")
  status           String
  attemptedAt      DateTime  @map("attempted_at")
  completedAt      DateTime? @map("completed_at")
  durationMs       Int?      @map("duration_ms")
  oldExpiresAt     DateTime? @map("old_expires_at")
  newExpiresAt     DateTime? @map("new_expires_at")
  errorCode        String?   @map("error_code")
  errorMessage     String?   @map("error_message")
  retryAttempt     Int       @default(0) @map("retry_attempt")
  requestMetadata  Json?     @map("request_metadata")
  responseMetadata Json?     @map("response_metadata")
  createdAt        DateTime  @default(now()) @map("created_at")

  @@index([tokenId])
  @@index([provider, tenantId])
  @@index([status, attemptedAt])
  @@map("token_refresh_logs")
}

enum InvoiceStatus {
  DRAFT
  SENT
  PARTIALLY_PAID
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  STRIPE_CARD
  STRIPE_BANK_TRANSFER
  QUICKBOOKS_CHECK
  QUICKBOOKS_CASH
  QUICKBOOKS_CREDIT_CARD
  QUICKBOOKS_BANK_TRANSFER
  OTHER
}

enum AllocationStatus {
  PENDING
  ALLOCATED
  CANCELLED
}

enum EntityType {
  INVOICE
  PAYMENT
  CONTACT
  COMPANY
  LINE_ITEM
  DEAL
}

enum Platform {
  HUBSPOT
  STRIPE
  QUICKBOOKS
}

enum SyncOperation {
  CREATE
  UPDATE
  DELETE
  SYNC
}

enum SyncStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  RETRYING
}

enum ActionType {
  CREATE
  UPDATE
  DELETE
  ASSOCIATE
  PAYMENT_UPDATE
}

enum QueueStatus {
  PENDING_REVIEW
  APPROVED
  REJECTED
  TRANSFERRED
  FAILED
  CANCELLED
}

// ============================================================================
// AUTHENTICATION ENUMS (Phase 2)
// ============================================================================

enum TenantRole {
  OWNER   // Full control, can delete tenant
  ADMIN   // Can manage users, settings, integrations
  MEMBER  // Standard access to all features
  VIEWER  // Read-only access
}

enum InvitationStatus {
  PENDING   // Invitation sent, awaiting response
  ACCEPTED  // User accepted and joined
  REJECTED  // User explicitly rejected
  EXPIRED   // Invitation expired before acceptance
}
